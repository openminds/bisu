require 'zlib'
require 'open-uri'
require 'ostruct'

module Bisu
  module VulnerabilityParser
    class Debian
      def initialize options={}
        @platform = options[:platform]
      end

      def source
        "http://secure-testing.debian.net/debian-secure-testing/" \
          "project/debsecan/release/1/#{@platform || 'GENERIC'}"
      end

      def parse_vulnerabilities
        package_strings = vulnerability_data.split(/\n\n/)[1].split(/\n/)
        package_strings.map do |pack_string|
          package, vulnerability_number, flags, unstable_version, other_versions = pack_string.split(/,/, 5)
          matching_cve = cve_list[vulnerability_number]
          OpenStruct.new({
            package: package,
            identifier: matching_cve.identifier,
            description: matching_cve.description,
            unstable_version: unstable_version,
            other_versions: other_versions.split(' '),
            urgency: urgency_from_flag(flags[1]),
            remotely_exploitable: remotely_exploitable_from_flag(flags[2]),
            fix_available: flags[3] == 'F',
          })
        end
      end

    private
      def vulnerability_data
        @vulnerability_data ||= Zlib::Inflate.inflate(File.read(open(source)))
      end

      def remotely_exploitable_from_flag flag
        case flag
        when 'R' then true
        when '?' then :unknown
        when ' ' then false
        end
      end

      def urgency_from_flag flag
        case flag
        when 'L' then :low
        when 'M' then :moderate
        when 'H' then :high
        else nil
        end
      end

      def cve_list
        @cve_list ||= parse_cve_list
      end

      def parse_cve_list
        vulnerability_strings = vulnerability_data.split(/\n\n/)[0].split(/\n/)
        vulnerability_strings.delete_at(0)
        vulnerability_strings.each_with_index.each_with_object({}) do |(vuln_string, idx), cve_list|
          identifier, _, description = vuln_string.split(/,/)
          cve_list[(idx).to_s] = OpenStruct.new({ identifier: identifier, description: description })
        end
      end
    end
  end
end
